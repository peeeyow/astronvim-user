{
  "cpf": {
    "prefix": "cp",
    "body": [
      "#ifdef ONPC",
      "    #define _GLIBCXX_DEBUG",
      "#endif",
      "#include <bits/stdc++.h>",
      "#define sz(a) ((int)((a).size()))",
      " ",
      "using namespace std;",
      "// mt19937 rnd(239);",
      "mt19937 rnd((unsigned long)chrono::steady_clock::now().time_since_epoch().count());",
      " ",
      "using ll = long long ;",
      "using ld = long double ;",
      " ",
      "int solve() {",
      "    $0",
      "    return 0;",
      "}",
      " ",
      "int32_t main() {",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    int TET = 1e9;",
      "    //cin >> TET;",
      "    for (int i = 1; i <= TET; i++) {",
      "        if (solve()) {",
      "            break;",
      "        }",
      "        #ifdef ONPC",
      "            cout << \"__________________________\" << endl;",
      "        #endif",
      "    }",
      "    #ifdef ONPC",
      "        cerr << endl << \"finished in \" << clock() * 1.0 / CLOCKS_PER_SEC << \" sec\" << endl;",
      "    #endif",
      "}"
    ],
    "description": "Competitive full programming template"
  },
  "cps": {
    "prefix": "cps",
    "body": [
      "#ifdef ONPC",
      "#define _GLIBCXX_DEBUG",
      "#endif",
      "#include <bits/stdc++.h>",
      "#define sz(a) ((int)((a).size()))",
      "",
      "using namespace std;",
      "",
      "using ll = long long;",
      "using ld = long double;",
      "",
      "int solve() {",
      "  $0",
      "  return 0;",
      "}",
      "",
      "int main() {",
      "#ifdef ONPC",
      "  freopen(\"in.txt\", \"r\", stdin);",
      "  freopen(\"out.txt\", \"w\", stdout);",
      "#endif",
      "  ios::sync_with_stdio(false);",
      "  cin.tie(nullptr);",
      "  solve();",
      "#ifdef ONPC",
      "  cerr << endl",
      "       << \"finished in \" << clock() * 1.0 / CLOCKS_PER_SEC << \" sec\" << endl;",
      "#endif",
      "  return 0;",
      "}"
    ],
    "description": "Competitive slim programming template"
  }
}
